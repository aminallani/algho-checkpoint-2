

ALGORITHM dist_elm
VAR
    tab1 , tab2 : ARRAY_OF INTEGER[10];
    SUM : INTEGER := 0
    I, J : INTEGER 
    found : BOOLEAN 
BEGIN
    FOR i FROM 0 TO tab1.length STEP 1  DO
        write ("enter element of tab1")
        read (tab1[i])
    END_FOR


    FOR j FROM 0 TO tab2.length STEP 1  DO
        write ("enter element of tab2")
        read (tab2[j])
    END_FOR


    FOR i FROM 0 TO tab1.length STEP 1  DO
        found := false
        FOR j FROM 0 TO tab2.length STEP 1  DO
            IF (tab1[i] == tab2[j]) THEN
                found := true 
            END_IF
        END_FOR

        IF (found = false) THEN
            SUM := SUM + tab1[i]
        END_IF

    END_FOR

    FOR j FROM 0 TO tab2 STEP 1  DO
        found := false
        FOR i FROM 0 TO tab1 STEP 1  DO
            IF (tab2[i] == tab1[j]) THEN
                found := true 
            END_IF
        END_FOR

        IF (found = false) THEN
            SUM := SUM + tab2[j]
        END_IF
    write (SUM)
END 
FUNCTION dot_pro (v1 , v2 : ARRAY_OF_INTEGER [10]) : INTEGER
VAR
    i , dot : INTEGER
BEGIN
    dot := 0
    i := 0
    IF (v1.length <> v2.length) THEN
        write ("vectore with diff size we cannot calc dot prod")
        RETURN NAN
    END_IF

    WHILE (i < v1.length) DO
        dot := dot + v1[i] * v2[i]
        i++
    END_WHILE

    RETURN dot ;
END

ALGORITHM orth-vect
VAR
    v1 , v2 :  ARRAY_OF INTEGER[10];
    dot : INTEGER
BEGIN
    write("da5el l vector louwel")
    read (v1)
    write("da5el l vector theni")
    read (v2)

    dot : = dot_pro (v1 ,v2)

    IF (dot === 0) THEN
        write ("v1 and v2 orth")
    ELSE
        write ("v1 and v2 are not orth")
    END_IF

END